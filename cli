#!/usr/bin/env python3

import argparse
import subprocess

parser = argparse.ArgumentParser(description="Host an X node.")

parser.add_argument('-c', '--chains', help="Which blockchain nodes to run (e.g. btc eth doge)", type=str, nargs='+', dest='chains')
parser.add_argument('-d', '--daemon', help="Daemonize runtime", action='store_true')
parser.add_argument('-r', '--recreate', help="Fully recreate node containers before running", action='store_true')
parser.add_argument('--develop', help="Dev mode - does not work in production builds", action='store_true')

args = parser.parse_args()

# node_compose_profiles = ['btc', 'eth', 'doge', 'bch', 'xmr', 'zec'] # init values are the defaults
profiles = []
defaults = ['btc', 'eth']

nodes = {
    'btc': 8333,
    'eth': 30303,
    'bch': 8333,
    'doge': 22556,
    'ltc': 9333,
    'xmr': 18080,
    'zec': 8233
}

# profiles_args = ["--profile", "xnode-dev" if args.develop else "xnode-prod"]
profiles_args = [] if args.develop else ["--profile", "xnode-prod"]
if args.chains != None:
    if 'btc' in args.chains and 'bch' in args.chains:
        raise Exception("BTC and BCH nodes both use conflicting port 8333. Please choose only one.")
    for c in args.chains:
        if nodes[c] == None:
            profiles_args = ""
            raise Exception(f"Invalid blockchain node type '{c}'")
        else:
            profiles_args += ["--profile", c]
    profiles = args.chains
else:
    for c in defaults:
        if c != 'bch':
            profiles_args += ["--profile", c]

print(f"Running on ports: {' '.join([str(nodes[node]) for node in profiles])}")

command = ["docker", "compose", *profiles_args, "up"]
if args.recreate:
    command.append("--build")
    command.append("--force-recreate")
    command.append("--remove-orphans")
if args.daemon:
    command.append("--detach")

subprocess.run(command)
